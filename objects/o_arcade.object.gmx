<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
score = 0;
lives = 3;
title = choose("Put down your coffee...", 
    "Stop! INVADER TIME!", 
    "Incomming...", 
    "We get signals", 
    "Look alive!");
spawn = false;
game_over = false;
level = 0;
diff = 0.5;
column = room_width / sprite_get_width(s_invader);
rows = 1;
timer = seconds(5);
ss = seconds(60);
alarm[0] = random(ss);

// create text for HUD
hud = ds_list_create();
ds_list_add(hud, "Score");
ds_list_add(hud, "Level");
ds_list_add(hud, "HP");
ds_list_add(hud, "Saucer");
ds_list_add(hud, "Timer");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Saucer
instance_create(room_width - 16, 16, o_saucer);
alarm[0] = random(ss);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Countdown
if (timer &gt; 0)
    timer--;
else if (timer == 0)
{
    // ToDo: Create a single variable called state
    //       State [Respawn, GameOver, ...]

    // game end
    if (game_over)
        room_goto(r_menu);
    // spawn ship
    else if (spawn)
    {
        var ship = instance_create((room_width - sprite_get_width(s_ship)) / 2, room_height - 16 - sprite_get_height(s_ship), o_ship);
        ship.maxhp = 3 - level div 2;
        ship.hp = ship.maxhp;
        spawn = false;
    }
    // new level
    else
    {        
        // create invaders
        for(var i = 0; i &lt; column; i++)
        {
            for (var j = 0; j &lt; rows; j++)
            {
                instance_create(32 + i * sprite_get_width(s_invader) + 2, 64 + j * sprite_get_height(s_invader) + 2, o_invader);
            }
        }
        
        // create walls
        for(var i = 0; i &lt; room_width / sprite_get_width(s_wall) / 2; i++)
        {
            var xx = i * sprite_get_width(s_wall)*2 + 2;
            var yy = room_height - 128;
            if (collision_rectangle(xx, yy, xx + 32, yy + 32, o_wall, false, true) == noone)
                instance_create(xx, yy, o_wall);
        }

        starmap();
        // increase level and rows of invaders
        level++;
        rows += ternary(rows &lt; 6, 1, 0);
        diff = level / 100;
    }
    
    timer = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
draw_set_font(f_hud);

// draw hud
for (var i = 0; i &lt; ds_list_size(hud); i++)
{
    var label = hud[| i];
    var value = "";
    switch(label)
    {
        case "Score":
            value = score;
            break;
        case "Level":
            value = level;
            break;
        case "HP":
            if (instance_exists(o_ship))
                value = o_ship.hp;
            break;
        case "Saucer":
            value = alarm[0];
            break;
        case "Timer":
            value = timer;
            break;
    }
    var text = label + ": " + string(value);
    var yy = string_height(text)*i;
    // debug values or game values
    if (global.debug &amp;&amp; (label == "HP" 
            || label == "Saucer" 
            || label == "Timer")
        || (label == "Score" || label == "Level"))
    {
        draw_text_colour(vw - string_width(text) - 4, 4 + yy, text, c_white, c_white, c_white, c_white, 1);
    }
}

// lives
for(var i = 0; i &lt; lives; i++)
{
    draw_sprite_ext(s_ship, 0, 16 + i * sprite_get_width(s_ship), 16, 0.75, 0.75, 0, c_white, 1);
}

// countdown
if (timer &gt; 0)
{
    var message = "(" + string(round(timer / room_speed)) + ")";
    var size = 64;
    draw_rectangle_colour(0, room_height / 2 - size, vh, vh / 2 + size, c_black, c_black, c_black, c_black, false);
    draw_text_colour((vw - string_width(title)) / 2, vh / 2 - 32, title, c_white, c_white, c_white, c_white, 1);
    draw_text_colour((vw - string_width(message)) / 2, vh / 2, message, c_white, c_white, c_white, c_white, 1);
}

draw_set_font(-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
