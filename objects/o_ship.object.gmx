<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
spd = 4;
cooldown = seconds(0.5);
maxhp = 3;
hp = 3;

phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Explosion
if (o_arcade.timer == -1)
    lives -= 1;

audio_play_sound(sfx_explode, 10, false);
effect_create_above(ef_ellipse, x, y, 0, c_green);

// respawn
if(lives &gt; 0)
{
    o_arcade.spawn = true;
    o_arcade.title = "Get Ready!";
    o_arcade.timer = seconds(6);
}
// game over
else
{
    audio_play_sound(sfx_game_over, 10, false);
    if (lives == 0)
    {
        var name = get_string("Name thy self, space cadet.", "SpaceAvaider");
        highscore_add(name, score);
        score = 0;
        room_goto(r_highscores);
    }
    o_arcade.game_over = true;
    o_arcade.title = "Game Over!";
    o_arcade.timer = seconds(10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
var hw = sprite_width / 2;

// movement
if (keyboard_check(vk_anykey))
{
    if (hp &lt; 2 &amp;&amp; irandom(100) &lt;= 15)
        effect_create_above(ef_smoke, x, y, 0, c_gray);
}
if (keyboard_check(vk_left) &amp;&amp; phy_position_x - hw &gt; 2)
    phy_position_x -= spd;
if (keyboard_check(vk_right) &amp;&amp; phy_position_x + hw + 2 &lt; room_width)
    phy_position_x += spd;

// fire
if (cooldown &gt; 0)
    cooldown--;
if (keyboard_check_pressed(vk_space) &amp;&amp; cooldown == 0)
{
    // create laser
    var laser = instance_create(x, y, o_laser);
    laser.owner = id;
    laser.image_blend = c_lime;
    with(laser)
    {
        var diff = ternary(instance_exists(o_arcade), o_arcade.diff, 1);
        physics_apply_local_impulse(0, 16 + sprite_height/2, 0, -(o_ship.spd*diff+1));
    }
    audio_play_sound(sfx_laser, 10, false);
    cooldown = seconds(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (get_index(other.owner) != object_index)
{
    hp--;
    if (hp &lt;= 0)
        instance_destroy();
    else        
        instance_create(phy_position_x, phy_position_y, o_shield);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_invader">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Ship
draw_sprite_ext(sprite_index, maxhp-hp, x, y, 1, 1, 0, image_blend, image_alpha);

var o = 4;
var xx = sprite_width/2;
var yy = sprite_height/2;
draw_healthbar(phy_position_x-xx-2, phy_position_y+yy-o, phy_position_x+xx, phy_position_y+yy-o*2, (hp / maxhp) * 100, c_black, c_red, c_blue, 0, true, true); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,18</point>
    <point>30,18</point>
    <point>30,24</point>
    <point>2,24</point>
  </PhysicsShapePoints>
</object>
